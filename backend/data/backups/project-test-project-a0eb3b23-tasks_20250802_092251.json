[
  {
    "id": "52ccac9f-ef34-4d56-aa63-8ca8b23f90d8",
    "title": "**Implement React Logout Functionality**",
    "description": "Add a logout button to the authenticated UI (e.g., header or dashboard) that clears the securely stored JWT token (leveraging the pending \"Create React Login Page and Secure JWT Storage\" task) and redirects the user to the login page.",
    "prompt": "# Cursor Prompt: **Implement React Logout Functionality**\n\n## Task Description\nAdd a logout button to the authenticated UI (e.g., header or dashboard) that clears the securely stored JWT token (leveraging the pending \"Create React Login Page and Secure JWT Storage\" task) and redirects the user to the login page.\n\n## Project Context\n- **Project**: Test Todo App\n- **Tech Stack**: React + FastAPI + PostgreSQL\n- **Description**: A test todo application for testing\n\n## Implementation Requirements\n1. Follow the project's existing code style and patterns\n2. Use the specified tech stack: React + FastAPI + PostgreSQL\n3. Implement the task as described above\n4. Include proper error handling and validation\n5. Add appropriate comments and documentation\n6. Consider integration with existing features\n\n## Code Guidelines\n- Write clean, maintainable code\n- Follow best practices for the tech stack\n- Include necessary imports and dependencies\n- Handle edge cases appropriately\n- Add tests if applicable\n\n## Expected Output\nComplete implementation of the task with all necessary files, components, and configurations.",
    "completed": false,
    "order": 1,
    "created_at": "2025-08-02 09:22:50.374072"
  },
  {
    "id": "6f7d530d-73c2-4bb5-a393-dfadaad0da63",
    "title": "**Modify FastAPI Todo Model for User Association**",
    "description": "Update the PostgreSQL `todos` table schema and the corresponding FastAPI/Pydantic models to include a `user_id` foreign key, linking each todo item to a specific user. This is a foundational step for private todo lists.",
    "prompt": "# Cursor Prompt: **Modify FastAPI Todo Model for User Association**\n\n## Task Description\nUpdate the PostgreSQL `todos` table schema and the corresponding FastAPI/Pydantic models to include a `user_id` foreign key, linking each todo item to a specific user. This is a foundational step for private todo lists.\n\n## Project Context\n- **Project**: Test Todo App\n- **Tech Stack**: React + FastAPI + PostgreSQL\n- **Description**: A test todo application for testing\n\n## Implementation Requirements\n1. Follow the project's existing code style and patterns\n2. Use the specified tech stack: React + FastAPI + PostgreSQL\n3. Implement the task as described above\n4. Include proper error handling and validation\n5. Add appropriate comments and documentation\n6. Consider integration with existing features\n\n## Code Guidelines\n- Write clean, maintainable code\n- Follow best practices for the tech stack\n- Include necessary imports and dependencies\n- Handle edge cases appropriately\n- Add tests if applicable\n\n## Expected Output\nComplete implementation of the task with all necessary files, components, and configurations.",
    "completed": false,
    "order": 2,
    "created_at": "2025-08-02 09:22:50.374192"
  },
  {
    "id": "f46462ef-9b21-4876-b240-79aa8e555598",
    "title": "**Update FastAPI Todo Endpoints for User Scoping**",
    "description": "Modify the existing FastAPI CRUD endpoints for todos (create, read, update, delete) to leverage the `Implement FastAPI JWT Authentication Dependency` pending task. Ensure that new todos are automatically associated with the authenticated user's ID, and all retrieval, update, or delete operations are strictly scoped to the authenticated user's `user_id`.",
    "prompt": "# Cursor Prompt: **Update FastAPI Todo Endpoints for User Scoping**\n\n## Task Description\nModify the existing FastAPI CRUD endpoints for todos (create, read, update, delete) to leverage the `Implement FastAPI JWT Authentication Dependency` pending task. Ensure that new todos are automatically associated with the authenticated user's ID, and all retrieval, update, or delete operations are strictly scoped to the authenticated user's `user_id`.\n\n## Project Context\n- **Project**: Test Todo App\n- **Tech Stack**: React + FastAPI + PostgreSQL\n- **Description**: A test todo application for testing\n\n## Implementation Requirements\n1. Follow the project's existing code style and patterns\n2. Use the specified tech stack: React + FastAPI + PostgreSQL\n3. Implement the task as described above\n4. Include proper error handling and validation\n5. Add appropriate comments and documentation\n6. Consider integration with existing features\n\n## Code Guidelines\n- Write clean, maintainable code\n- Follow best practices for the tech stack\n- Include necessary imports and dependencies\n- Handle edge cases appropriately\n- Add tests if applicable\n\n## Expected Output\nComplete implementation of the task with all necessary files, components, and configurations.",
    "completed": false,
    "order": 3,
    "created_at": "2025-08-02 09:22:50.374199"
  },
  {
    "id": "14deeb8e-651a-4155-a8ab-4bfaf167ebeb",
    "title": "**Implement React Private Todo List Page Protection**",
    "description": "Enhance the frontend routing (e.g., using React Router) to protect the main todo list page. Implement a client-side check (e.g., using an authentication context or HOC) to verify the presence of a valid JWT token. If no token is found, redirect the user to the login page, building upon the \"Create React Login Page\" pending task.",
    "prompt": "# Cursor Prompt: **Implement React Private Todo List Page Protection**\n\n## Task Description\nEnhance the frontend routing (e.g., using React Router) to protect the main todo list page. Implement a client-side check (e.g., using an authentication context or HOC) to verify the presence of a valid JWT token. If no token is found, redirect the user to the login page, building upon the \"Create React Login Page\" pending task.\n\n## Project Context\n- **Project**: Test Todo App\n- **Tech Stack**: React + FastAPI + PostgreSQL\n- **Description**: A test todo application for testing\n\n## Implementation Requirements\n1. Follow the project's existing code style and patterns\n2. Use the specified tech stack: React + FastAPI + PostgreSQL\n3. Implement the task as described above\n4. Include proper error handling and validation\n5. Add appropriate comments and documentation\n6. Consider integration with existing features\n\n## Code Guidelines\n- Write clean, maintainable code\n- Follow best practices for the tech stack\n- Include necessary imports and dependencies\n- Handle edge cases appropriately\n- Add tests if applicable\n\n## Expected Output\nComplete implementation of the task with all necessary files, components, and configurations.",
    "completed": false,
    "order": 4,
    "created_at": "2025-08-02 09:22:50.374203"
  },
  {
    "id": "636b8e8a-51d7-4a41-b30e-e680d791259b",
    "title": "**Implement FastAPI Password Reset Request Endpoint**",
    "description": "Create a new FastAPI endpoint (e.g., `/api/auth/request-password-reset`) that accepts a user's email address. This endpoint should generate a unique, time-limited password reset token, store it in the database associated with the user, and simulate sending a password reset link to the user's email address.",
    "prompt": "# Cursor Prompt: **Implement FastAPI Password Reset Request Endpoint**\n\n## Task Description\nCreate a new FastAPI endpoint (e.g., `/api/auth/request-password-reset`) that accepts a user's email address. This endpoint should generate a unique, time-limited password reset token, store it in the database associated with the user, and simulate sending a password reset link to the user's email address.\n\n## Project Context\n- **Project**: Test Todo App\n- **Tech Stack**: React + FastAPI + PostgreSQL\n- **Description**: A test todo application for testing\n\n## Implementation Requirements\n1. Follow the project's existing code style and patterns\n2. Use the specified tech stack: React + FastAPI + PostgreSQL\n3. Implement the task as described above\n4. Include proper error handling and validation\n5. Add appropriate comments and documentation\n6. Consider integration with existing features\n\n## Code Guidelines\n- Write clean, maintainable code\n- Follow best practices for the tech stack\n- Include necessary imports and dependencies\n- Handle edge cases appropriately\n- Add tests if applicable\n\n## Expected Output\nComplete implementation of the task with all necessary files, components, and configurations.",
    "completed": false,
    "order": 5,
    "created_at": "2025-08-02 09:22:50.374207"
  },
  {
    "id": "0208822d-9ee1-47ff-85a4-256a987f4587",
    "title": "**Implement React Password Reset Request Page**",
    "description": "Create a new dedicated React page (e.g., `/forgot-password`) with a form for users to submit their email address to request a password reset link. Implement client-side form validation and integrate it with the FastAPI password reset request endpoint.",
    "prompt": "# Cursor Prompt: **Implement React Password Reset Request Page**\n\n## Task Description\nCreate a new dedicated React page (e.g., `/forgot-password`) with a form for users to submit their email address to request a password reset link. Implement client-side form validation and integrate it with the FastAPI password reset request endpoint.\n\n## Project Context\n- **Project**: Test Todo App\n- **Tech Stack**: React + FastAPI + PostgreSQL\n- **Description**: A test todo application for testing\n\n## Implementation Requirements\n1. Follow the project's existing code style and patterns\n2. Use the specified tech stack: React + FastAPI + PostgreSQL\n3. Implement the task as described above\n4. Include proper error handling and validation\n5. Add appropriate comments and documentation\n6. Consider integration with existing features\n\n## Code Guidelines\n- Write clean, maintainable code\n- Follow best practices for the tech stack\n- Include necessary imports and dependencies\n- Handle edge cases appropriately\n- Add tests if applicable\n\n## Expected Output\nComplete implementation of the task with all necessary files, components, and configurations.",
    "completed": false,
    "order": 6,
    "created_at": "2025-08-02 09:22:50.374212"
  },
  {
    "id": "c5b42223-a459-46ab-b39d-b2b3d9b71d7d",
    "title": "**Implement FastAPI Password Reset Confirmation Endpoint**",
    "description": "Create another FastAPI endpoint (e.g., `/api/auth/reset-password-confirm`) that accepts the password reset token and the new password. This endpoint should validate the provided token, hash the new password, update the user's password in the database, and invalidate the used token to prevent reuse.",
    "prompt": "# Cursor Prompt: **Implement FastAPI Password Reset Confirmation Endpoint**\n\n## Task Description\nCreate another FastAPI endpoint (e.g., `/api/auth/reset-password-confirm`) that accepts the password reset token and the new password. This endpoint should validate the provided token, hash the new password, update the user's password in the database, and invalidate the used token to prevent reuse.\n\n## Project Context\n- **Project**: Test Todo App\n- **Tech Stack**: React + FastAPI + PostgreSQL\n- **Description**: A test todo application for testing\n\n## Implementation Requirements\n1. Follow the project's existing code style and patterns\n2. Use the specified tech stack: React + FastAPI + PostgreSQL\n3. Implement the task as described above\n4. Include proper error handling and validation\n5. Add appropriate comments and documentation\n6. Consider integration with existing features\n\n## Code Guidelines\n- Write clean, maintainable code\n- Follow best practices for the tech stack\n- Include necessary imports and dependencies\n- Handle edge cases appropriately\n- Add tests if applicable\n\n## Expected Output\nComplete implementation of the task with all necessary files, components, and configurations.",
    "completed": false,
    "order": 7,
    "created_at": "2025-08-02 09:22:50.374216"
  }
]