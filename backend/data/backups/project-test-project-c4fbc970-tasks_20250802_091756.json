[
  {
    "id": "b32894ce-d26d-494d-b567-fe86bec69120",
    "title": "**Set up User Database Model and Schema**",
    "description": "Implement the PostgreSQL `users` table schema (e.g., `id`, `email`, `hashed_password`) and define the corresponding Pydantic models for user creation and response in FastAPI, ensuring proper data types for authentication.",
    "prompt": "# Cursor Prompt: **Set up User Database Model and Schema**\n\n## Task Description\nImplement the PostgreSQL `users` table schema (e.g., `id`, `email`, `hashed_password`) and define the corresponding Pydantic models for user creation and response in FastAPI, ensuring proper data types for authentication.\n\n## Project Context\n- **Project**: Test Todo App\n- **Tech Stack**: React + FastAPI + PostgreSQL\n- **Description**: A test todo application for testing\n\n## Implementation Requirements\n1. Follow the project's existing code style and patterns\n2. Use the specified tech stack: React + FastAPI + PostgreSQL\n3. Implement the task as described above\n4. Include proper error handling and validation\n5. Add appropriate comments and documentation\n6. Consider integration with existing features\n\n## Code Guidelines\n- Write clean, maintainable code\n- Follow best practices for the tech stack\n- Include necessary imports and dependencies\n- Handle edge cases appropriately\n- Add tests if applicable\n\n## Expected Output\nComplete implementation of the task with all necessary files, components, and configurations.",
    "completed": false,
    "order": 1,
    "created_at": "2025-08-02 09:17:26.506851"
  },
  {
    "id": "42084384-25c6-4f43-b348-78799c585e4d",
    "title": "**Implement Password Hashing and JWT Utilities**",
    "description": "Create helper functions in FastAPI for securely hashing and verifying passwords (e.g., using `passlib`'s `bcrypt`). Also, implement utility functions for creating, encoding, and decoding JWT access tokens, including configuration for secret key and expiration.",
    "prompt": "# Cursor Prompt: **Implement Password Hashing and JWT Utilities**\n\n## Task Description\nCreate helper functions in FastAPI for securely hashing and verifying passwords (e.g., using `passlib`'s `bcrypt`). Also, implement utility functions for creating, encoding, and decoding JWT access tokens, including configuration for secret key and expiration.\n\n## Project Context\n- **Project**: Test Todo App\n- **Tech Stack**: React + FastAPI + PostgreSQL\n- **Description**: A test todo application for testing\n\n## Implementation Requirements\n1. Follow the project's existing code style and patterns\n2. Use the specified tech stack: React + FastAPI + PostgreSQL\n3. Implement the task as described above\n4. Include proper error handling and validation\n5. Add appropriate comments and documentation\n6. Consider integration with existing features\n\n## Code Guidelines\n- Write clean, maintainable code\n- Follow best practices for the tech stack\n- Include necessary imports and dependencies\n- Handle edge cases appropriately\n- Add tests if applicable\n\n## Expected Output\nComplete implementation of the task with all necessary files, components, and configurations.",
    "completed": false,
    "order": 2,
    "created_at": "2025-08-02 09:17:26.507060"
  },
  {
    "id": "0e259f85-dc26-4ce4-aae6-fa3eb24e9d9d",
    "title": "**Develop User Registration FastAPI Endpoint**",
    "description": "Build the `POST /register` endpoint in FastAPI. This endpoint should accept user email and password, hash the password using the helper function from Task 2, store the new user in the PostgreSQL database, and return a success response. Include basic validation for email format and password strength.",
    "prompt": "# Cursor Prompt: **Develop User Registration FastAPI Endpoint**\n\n## Task Description\nBuild the `POST /register` endpoint in FastAPI. This endpoint should accept user email and password, hash the password using the helper function from Task 2, store the new user in the PostgreSQL database, and return a success response. Include basic validation for email format and password strength.\n\n## Project Context\n- **Project**: Test Todo App\n- **Tech Stack**: React + FastAPI + PostgreSQL\n- **Description**: A test todo application for testing\n\n## Implementation Requirements\n1. Follow the project's existing code style and patterns\n2. Use the specified tech stack: React + FastAPI + PostgreSQL\n3. Implement the task as described above\n4. Include proper error handling and validation\n5. Add appropriate comments and documentation\n6. Consider integration with existing features\n\n## Code Guidelines\n- Write clean, maintainable code\n- Follow best practices for the tech stack\n- Include necessary imports and dependencies\n- Handle edge cases appropriately\n- Add tests if applicable\n\n## Expected Output\nComplete implementation of the task with all necessary files, components, and configurations.",
    "completed": false,
    "order": 3,
    "created_at": "2025-08-02 09:17:26.507068"
  },
  {
    "id": "123bc6ae-67dc-4cf7-aeca-5ee5a35153fa",
    "title": "**Create User Login FastAPI Endpoint**",
    "description": "Implement the `POST /login` endpoint in FastAPI. This endpoint should verify the provided email and password against the stored hashed password. Upon successful authentication, it should generate a JWT using the utilities from Task 2 and return it as part of the response.",
    "prompt": "# Cursor Prompt: **Create User Login FastAPI Endpoint**\n\n## Task Description\nImplement the `POST /login` endpoint in FastAPI. This endpoint should verify the provided email and password against the stored hashed password. Upon successful authentication, it should generate a JWT using the utilities from Task 2 and return it as part of the response.\n\n## Project Context\n- **Project**: Test Todo App\n- **Tech Stack**: React + FastAPI + PostgreSQL\n- **Description**: A test todo application for testing\n\n## Implementation Requirements\n1. Follow the project's existing code style and patterns\n2. Use the specified tech stack: React + FastAPI + PostgreSQL\n3. Implement the task as described above\n4. Include proper error handling and validation\n5. Add appropriate comments and documentation\n6. Consider integration with existing features\n\n## Code Guidelines\n- Write clean, maintainable code\n- Follow best practices for the tech stack\n- Include necessary imports and dependencies\n- Handle edge cases appropriately\n- Add tests if applicable\n\n## Expected Output\nComplete implementation of the task with all necessary files, components, and configurations.",
    "completed": false,
    "order": 4,
    "created_at": "2025-08-02 09:17:26.507074"
  },
  {
    "id": "1cfa8061-2bac-4e2d-ad43-a6f73996906d",
    "title": "**Implement FastAPI Authentication Dependency and User-Specific Todo Access**",
    "description": "Develop a FastAPI `Depends` function that extracts and validates the JWT from incoming requests, verifying its authenticity and expiration. Use this dependency to protect existing or future todo list endpoints, ensuring that only authenticated users can access them and that todo items are filtered/managed based on the authenticated user's ID.",
    "prompt": "# Cursor Prompt: **Implement FastAPI Authentication Dependency and User-Specific Todo Access**\n\n## Task Description\nDevelop a FastAPI `Depends` function that extracts and validates the JWT from incoming requests, verifying its authenticity and expiration. Use this dependency to protect existing or future todo list endpoints, ensuring that only authenticated users can access them and that todo items are filtered/managed based on the authenticated user's ID.\n\n## Project Context\n- **Project**: Test Todo App\n- **Tech Stack**: React + FastAPI + PostgreSQL\n- **Description**: A test todo application for testing\n\n## Implementation Requirements\n1. Follow the project's existing code style and patterns\n2. Use the specified tech stack: React + FastAPI + PostgreSQL\n3. Implement the task as described above\n4. Include proper error handling and validation\n5. Add appropriate comments and documentation\n6. Consider integration with existing features\n\n## Code Guidelines\n- Write clean, maintainable code\n- Follow best practices for the tech stack\n- Include necessary imports and dependencies\n- Handle edge cases appropriately\n- Add tests if applicable\n\n## Expected Output\nComplete implementation of the task with all necessary files, components, and configurations.",
    "completed": false,
    "order": 5,
    "created_at": "2025-08-02 09:17:26.507079"
  },
  {
    "id": "066597ed-72d1-4444-8241-953653d7c23c",
    "title": "**Build React Registration and Login Pages**",
    "description": "Create dedicated React components for the `/register` and `/login` routes. Each component should contain a form with email and password fields, basic client-side validation, and submit handlers to interact with the FastAPI registration and login endpoints. Upon successful login, securely store the received JWT (e.g., in `localStorage` for quick iteration, or `HttpOnly` cookie if a backend approach for cookies is preferred).",
    "prompt": "# Cursor Prompt: **Build React Registration and Login Pages**\n\n## Task Description\nCreate dedicated React components for the `/register` and `/login` routes. Each component should contain a form with email and password fields, basic client-side validation, and submit handlers to interact with the FastAPI registration and login endpoints. Upon successful login, securely store the received JWT (e.g., in `localStorage` for quick iteration, or `HttpOnly` cookie if a backend approach for cookies is preferred).\n\n## Project Context\n- **Project**: Test Todo App\n- **Tech Stack**: React + FastAPI + PostgreSQL\n- **Description**: A test todo application for testing\n\n## Implementation Requirements\n1. Follow the project's existing code style and patterns\n2. Use the specified tech stack: React + FastAPI + PostgreSQL\n3. Implement the task as described above\n4. Include proper error handling and validation\n5. Add appropriate comments and documentation\n6. Consider integration with existing features\n\n## Code Guidelines\n- Write clean, maintainable code\n- Follow best practices for the tech stack\n- Include necessary imports and dependencies\n- Handle edge cases appropriately\n- Add tests if applicable\n\n## Expected Output\nComplete implementation of the task with all necessary files, components, and configurations.",
    "completed": false,
    "order": 6,
    "created_at": "2025-08-02 09:17:26.507087"
  },
  {
    "id": "641460c1-e185-4bb3-8778-dffde094c340",
    "title": "**Implement React Logout and Protected Routing**",
    "description": "Add a logout mechanism to the React frontend that clears the stored JWT and redirects the user to the login page. Configure React Router to protect routes (e.g., `/todos`) requiring authentication, redirecting unauthenticated users to the login page and ensuring the JWT is sent with authenticated requests to the backend.",
    "prompt": "# Cursor Prompt: **Implement React Logout and Protected Routing**\n\n## Task Description\nAdd a logout mechanism to the React frontend that clears the stored JWT and redirects the user to the login page. Configure React Router to protect routes (e.g., `/todos`) requiring authentication, redirecting unauthenticated users to the login page and ensuring the JWT is sent with authenticated requests to the backend.\n\n## Project Context\n- **Project**: Test Todo App\n- **Tech Stack**: React + FastAPI + PostgreSQL\n- **Description**: A test todo application for testing\n\n## Implementation Requirements\n1. Follow the project's existing code style and patterns\n2. Use the specified tech stack: React + FastAPI + PostgreSQL\n3. Implement the task as described above\n4. Include proper error handling and validation\n5. Add appropriate comments and documentation\n6. Consider integration with existing features\n\n## Code Guidelines\n- Write clean, maintainable code\n- Follow best practices for the tech stack\n- Include necessary imports and dependencies\n- Handle edge cases appropriately\n- Add tests if applicable\n\n## Expected Output\nComplete implementation of the task with all necessary files, components, and configurations.",
    "completed": false,
    "order": 7,
    "created_at": "2025-08-02 09:17:26.507092"
  }
]