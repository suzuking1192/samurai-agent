[
  {
    "id": "97f93232-af2d-4c9c-a44f-185ad18156b9",
    "title": "**Define and Implement PostgreSQL User Schema**",
    "description": "Define and apply the `users` table schema in PostgreSQL. This table should include `id` (primary key), `email` (unique), `hashed_password`, and `created_at` fields, along with appropriate indices for efficient lookups.",
    "prompt": "# Cursor Prompt: **Define and Implement PostgreSQL User Schema**\n\n## Task Description\nDefine and apply the `users` table schema in PostgreSQL. This table should include `id` (primary key), `email` (unique), `hashed_password`, and `created_at` fields, along with appropriate indices for efficient lookups.\n\n## Project Context\n- **Project**: Test Todo App\n- **Tech Stack**: React + FastAPI + PostgreSQL\n- **Description**: A test todo application for testing\n\n## Implementation Requirements\n1. Follow the project's existing code style and patterns\n2. Use the specified tech stack: React + FastAPI + PostgreSQL\n3. Implement the task as described above\n4. Include proper error handling and validation\n5. Add appropriate comments and documentation\n6. Consider integration with existing features\n\n## Code Guidelines\n- Write clean, maintainable code\n- Follow best practices for the tech stack\n- Include necessary imports and dependencies\n- Handle edge cases appropriately\n- Add tests if applicable\n\n## Expected Output\nComplete implementation of the task with all necessary files, components, and configurations.",
    "completed": false,
    "order": 1,
    "created_at": "2025-08-02 09:22:21.617437"
  },
  {
    "id": "c4f0c8dc-65c1-4b4a-86f5-e80ebb87de0a",
    "title": "**Implement FastAPI User Registration Endpoint**",
    "description": "Create a FastAPI `POST /register` endpoint. This endpoint will accept `email` and `password` from the request body, securely hash the password using `passlib` (e.g., `bcrypt`), and store the new user's details in the PostgreSQL `users` table. Include basic input validation for email format and password strength.",
    "prompt": "# Cursor Prompt: **Implement FastAPI User Registration Endpoint**\n\n## Task Description\nCreate a FastAPI `POST /register` endpoint. This endpoint will accept `email` and `password` from the request body, securely hash the password using `passlib` (e.g., `bcrypt`), and store the new user's details in the PostgreSQL `users` table. Include basic input validation for email format and password strength.\n\n## Project Context\n- **Project**: Test Todo App\n- **Tech Stack**: React + FastAPI + PostgreSQL\n- **Description**: A test todo application for testing\n\n## Implementation Requirements\n1. Follow the project's existing code style and patterns\n2. Use the specified tech stack: React + FastAPI + PostgreSQL\n3. Implement the task as described above\n4. Include proper error handling and validation\n5. Add appropriate comments and documentation\n6. Consider integration with existing features\n\n## Code Guidelines\n- Write clean, maintainable code\n- Follow best practices for the tech stack\n- Include necessary imports and dependencies\n- Handle edge cases appropriately\n- Add tests if applicable\n\n## Expected Output\nComplete implementation of the task with all necessary files, components, and configurations.",
    "completed": false,
    "order": 2,
    "created_at": "2025-08-02 09:22:21.623206"
  },
  {
    "id": "46cb3ba0-2ffd-4c3e-9c2f-e051a9076ea7",
    "title": "**Implement FastAPI User Login Endpoint with JWT Generation**",
    "description": "Create a FastAPI `POST /login` endpoint. This endpoint will accept `email` and `password`, verify the provided password against the stored hashed password. If credentials are valid, generate and return a new JWT access token containing the user's ID, setting an appropriate expiry time.",
    "prompt": "# Cursor Prompt: **Implement FastAPI User Login Endpoint with JWT Generation**\n\n## Task Description\nCreate a FastAPI `POST /login` endpoint. This endpoint will accept `email` and `password`, verify the provided password against the stored hashed password. If credentials are valid, generate and return a new JWT access token containing the user's ID, setting an appropriate expiry time.\n\n## Project Context\n- **Project**: Test Todo App\n- **Tech Stack**: React + FastAPI + PostgreSQL\n- **Description**: A test todo application for testing\n\n## Implementation Requirements\n1. Follow the project's existing code style and patterns\n2. Use the specified tech stack: React + FastAPI + PostgreSQL\n3. Implement the task as described above\n4. Include proper error handling and validation\n5. Add appropriate comments and documentation\n6. Consider integration with existing features\n\n## Code Guidelines\n- Write clean, maintainable code\n- Follow best practices for the tech stack\n- Include necessary imports and dependencies\n- Handle edge cases appropriately\n- Add tests if applicable\n\n## Expected Output\nComplete implementation of the task with all necessary files, components, and configurations.",
    "completed": false,
    "order": 3,
    "created_at": "2025-08-02 09:22:21.623222"
  },
  {
    "id": "dcc1599d-588d-402a-81a2-5e6e4474c4f4",
    "title": "**Implement FastAPI JWT Authentication Dependency**",
    "description": "Develop a FastAPI dependency function (e.g., `get_current_user`) that extracts the JWT token from the `Authorization` header, decodes it, and validates its signature and expiry. This dependency will be used to protect future backend routes, ensuring only authenticated users can access them, and will provide the `user_id` for user-specific data.",
    "prompt": "# Cursor Prompt: **Implement FastAPI JWT Authentication Dependency**\n\n## Task Description\nDevelop a FastAPI dependency function (e.g., `get_current_user`) that extracts the JWT token from the `Authorization` header, decodes it, and validates its signature and expiry. This dependency will be used to protect future backend routes, ensuring only authenticated users can access them, and will provide the `user_id` for user-specific data.\n\n## Project Context\n- **Project**: Test Todo App\n- **Tech Stack**: React + FastAPI + PostgreSQL\n- **Description**: A test todo application for testing\n\n## Implementation Requirements\n1. Follow the project's existing code style and patterns\n2. Use the specified tech stack: React + FastAPI + PostgreSQL\n3. Implement the task as described above\n4. Include proper error handling and validation\n5. Add appropriate comments and documentation\n6. Consider integration with existing features\n\n## Code Guidelines\n- Write clean, maintainable code\n- Follow best practices for the tech stack\n- Include necessary imports and dependencies\n- Handle edge cases appropriately\n- Add tests if applicable\n\n## Expected Output\nComplete implementation of the task with all necessary files, components, and configurations.",
    "completed": false,
    "order": 4,
    "created_at": "2025-08-02 09:22:21.623231"
  },
  {
    "id": "e059bc77-bea2-411a-b626-1a5a0f694ae6",
    "title": "**Create React Registration Page and API Integration**",
    "description": "Develop a dedicated React page component for user registration (`/register`). This page will include a form with input fields for email and password. Implement client-side form validation (e.g., required fields, email format) and integrate it with the FastAPI `/register` endpoint to create new user accounts.",
    "prompt": "# Cursor Prompt: **Create React Registration Page and API Integration**\n\n## Task Description\nDevelop a dedicated React page component for user registration (`/register`). This page will include a form with input fields for email and password. Implement client-side form validation (e.g., required fields, email format) and integrate it with the FastAPI `/register` endpoint to create new user accounts.\n\n## Project Context\n- **Project**: Test Todo App\n- **Tech Stack**: React + FastAPI + PostgreSQL\n- **Description**: A test todo application for testing\n\n## Implementation Requirements\n1. Follow the project's existing code style and patterns\n2. Use the specified tech stack: React + FastAPI + PostgreSQL\n3. Implement the task as described above\n4. Include proper error handling and validation\n5. Add appropriate comments and documentation\n6. Consider integration with existing features\n\n## Code Guidelines\n- Write clean, maintainable code\n- Follow best practices for the tech stack\n- Include necessary imports and dependencies\n- Handle edge cases appropriately\n- Add tests if applicable\n\n## Expected Output\nComplete implementation of the task with all necessary files, components, and configurations.",
    "completed": false,
    "order": 5,
    "created_at": "2025-08-02 09:22:21.623239"
  },
  {
    "id": "41598114-bd82-45ac-b5e3-da5188fb5c72",
    "title": "**Create React Login Page and Secure JWT Storage**",
    "description": "Develop a dedicated React page component for user login (`/login`). This page will feature a form with email and password input fields. Implement client-side form validation and integrate it with the FastAPI `/login` endpoint. Upon successful authentication, securely store the received JWT (e.g., in `localStorage` or `sessionStorage` for this project's scope, with considerations for more secure methods like HttpOnly cookies in production).",
    "prompt": "# Cursor Prompt: **Create React Login Page and Secure JWT Storage**\n\n## Task Description\nDevelop a dedicated React page component for user login (`/login`). This page will feature a form with email and password input fields. Implement client-side form validation and integrate it with the FastAPI `/login` endpoint. Upon successful authentication, securely store the received JWT (e.g., in `localStorage` or `sessionStorage` for this project's scope, with considerations for more secure methods like HttpOnly cookies in production).\n\n## Project Context\n- **Project**: Test Todo App\n- **Tech Stack**: React + FastAPI + PostgreSQL\n- **Description**: A test todo application for testing\n\n## Implementation Requirements\n1. Follow the project's existing code style and patterns\n2. Use the specified tech stack: React + FastAPI + PostgreSQL\n3. Implement the task as described above\n4. Include proper error handling and validation\n5. Add appropriate comments and documentation\n6. Consider integration with existing features\n\n## Code Guidelines\n- Write clean, maintainable code\n- Follow best practices for the tech stack\n- Include necessary imports and dependencies\n- Handle edge cases appropriately\n- Add tests if applicable\n\n## Expected Output\nComplete implementation of the task with all necessary files, components, and configurations.",
    "completed": false,
    "order": 6,
    "created_at": "2025-08-02 09:22:21.623251"
  },
  {
    "id": "11f1c62e-92ae-4031-9844-c285d20779bd",
    "title": "**Implement React Authentication Context and Logout Functionality**",
    "description": "Create a React Context or a custom hook (`useAuth`) to manage and provide global authentication state (e.g., `isAuthenticated`, `user_id`, `token`). Implement a logout function within this context/hook that clears the stored JWT token from client-side storage, resets the authentication state, and redirects the user to the login page.",
    "prompt": "# Cursor Prompt: **Implement React Authentication Context and Logout Functionality**\n\n## Task Description\nCreate a React Context or a custom hook (`useAuth`) to manage and provide global authentication state (e.g., `isAuthenticated`, `user_id`, `token`). Implement a logout function within this context/hook that clears the stored JWT token from client-side storage, resets the authentication state, and redirects the user to the login page.\n\n## Project Context\n- **Project**: Test Todo App\n- **Tech Stack**: React + FastAPI + PostgreSQL\n- **Description**: A test todo application for testing\n\n## Implementation Requirements\n1. Follow the project's existing code style and patterns\n2. Use the specified tech stack: React + FastAPI + PostgreSQL\n3. Implement the task as described above\n4. Include proper error handling and validation\n5. Add appropriate comments and documentation\n6. Consider integration with existing features\n\n## Code Guidelines\n- Write clean, maintainable code\n- Follow best practices for the tech stack\n- Include necessary imports and dependencies\n- Handle edge cases appropriately\n- Add tests if applicable\n\n## Expected Output\nComplete implementation of the task with all necessary files, components, and configurations.",
    "completed": false,
    "order": 7,
    "created_at": "2025-08-02 09:22:21.623259"
  }
]