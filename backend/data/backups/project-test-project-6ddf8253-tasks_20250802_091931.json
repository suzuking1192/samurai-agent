[
  {
    "id": "68e7c21f-d88d-4007-b910-22011268376b",
    "title": "**Backend User Registration Endpoint Implementation**",
    "description": "Create the FastAPI `POST /register` endpoint. This endpoint will receive user email and password, hash the password using a secure method (e.g., `passlib.context.CryptContext` for `bcrypt`), store the user details in the PostgreSQL database, and handle potential duplicate email errors. This builds directly on ⏸️ **Backend User Registration Endpoint**.",
    "prompt": "# Cursor Prompt: **Backend User Registration Endpoint Implementation**\n\n## Task Description\nCreate the FastAPI `POST /register` endpoint. This endpoint will receive user email and password, hash the password using a secure method (e.g., `passlib.context.CryptContext` for `bcrypt`), store the user details in the PostgreSQL database, and handle potential duplicate email errors. This builds directly on ⏸️ **Backend User Registration Endpoint**.\n\n## Project Context\n- **Project**: Test Todo App\n- **Tech Stack**: React + FastAPI + PostgreSQL\n- **Description**: A test todo application for testing\n\n## Implementation Requirements\n1. Follow the project's existing code style and patterns\n2. Use the specified tech stack: React + FastAPI + PostgreSQL\n3. Implement the task as described above\n4. Include proper error handling and validation\n5. Add appropriate comments and documentation\n6. Consider integration with existing features\n\n## Code Guidelines\n- Write clean, maintainable code\n- Follow best practices for the tech stack\n- Include necessary imports and dependencies\n- Handle edge cases appropriately\n- Add tests if applicable\n\n## Expected Output\nComplete implementation of the task with all necessary files, components, and configurations.",
    "completed": false,
    "order": 1,
    "created_at": "2025-08-02 09:19:30.157384"
  },
  {
    "id": "0dc897bd-a611-467e-9467-ddc26b1f293c",
    "title": "**Frontend Registration Page Development & Integration**",
    "description": "Develop the React `RegistrationPage` component. Implement the user interface with email and password input fields, including client-side validation for format and strength. Connect this form to the new `POST /register` backend endpoint, handling successful registration and displaying error messages from the backend. This directly addresses ⏸️ **Frontend Registration Page & Validation**.",
    "prompt": "# Cursor Prompt: **Frontend Registration Page Development & Integration**\n\n## Task Description\nDevelop the React `RegistrationPage` component. Implement the user interface with email and password input fields, including client-side validation for format and strength. Connect this form to the new `POST /register` backend endpoint, handling successful registration and displaying error messages from the backend. This directly addresses ⏸️ **Frontend Registration Page & Validation**.\n\n## Project Context\n- **Project**: Test Todo App\n- **Tech Stack**: React + FastAPI + PostgreSQL\n- **Description**: A test todo application for testing\n\n## Implementation Requirements\n1. Follow the project's existing code style and patterns\n2. Use the specified tech stack: React + FastAPI + PostgreSQL\n3. Implement the task as described above\n4. Include proper error handling and validation\n5. Add appropriate comments and documentation\n6. Consider integration with existing features\n\n## Code Guidelines\n- Write clean, maintainable code\n- Follow best practices for the tech stack\n- Include necessary imports and dependencies\n- Handle edge cases appropriately\n- Add tests if applicable\n\n## Expected Output\nComplete implementation of the task with all necessary files, components, and configurations.",
    "completed": false,
    "order": 2,
    "created_at": "2025-08-02 09:19:30.157458"
  },
  {
    "id": "0f9bc747-8992-4656-bf0b-3cb142b90905",
    "title": "**Backend Login Endpoint & JWT Generation**",
    "description": "Implement the FastAPI `POST /token` (or `/login`) endpoint. This endpoint will accept email and password, verify credentials against the hashed password in the database, and if successful, generate and return a JWT access token. This is a new, crucial backend component for authentication.",
    "prompt": "# Cursor Prompt: **Backend Login Endpoint & JWT Generation**\n\n## Task Description\nImplement the FastAPI `POST /token` (or `/login`) endpoint. This endpoint will accept email and password, verify credentials against the hashed password in the database, and if successful, generate and return a JWT access token. This is a new, crucial backend component for authentication.\n\n## Project Context\n- **Project**: Test Todo App\n- **Tech Stack**: React + FastAPI + PostgreSQL\n- **Description**: A test todo application for testing\n\n## Implementation Requirements\n1. Follow the project's existing code style and patterns\n2. Use the specified tech stack: React + FastAPI + PostgreSQL\n3. Implement the task as described above\n4. Include proper error handling and validation\n5. Add appropriate comments and documentation\n6. Consider integration with existing features\n\n## Code Guidelines\n- Write clean, maintainable code\n- Follow best practices for the tech stack\n- Include necessary imports and dependencies\n- Handle edge cases appropriately\n- Add tests if applicable\n\n## Expected Output\nComplete implementation of the task with all necessary files, components, and configurations.",
    "completed": false,
    "order": 3,
    "created_at": "2025-08-02 09:19:30.157478"
  },
  {
    "id": "e900a238-97da-4942-905d-a7c3c6a65f0f",
    "title": "**Frontend Login Page, JWT Storage & Logout Logic**",
    "description": "Create the React `LoginPage` component with email/password input. On successful login, securely store the received JWT (e.g., in `localStorage` or `sessionStorage` with appropriate security considerations). Implement a client-side logout mechanism that clears the stored JWT and redirects the user. This fully implements ⏸️ **Frontend Login Page & JWT Storage/Logout**.",
    "prompt": "# Cursor Prompt: **Frontend Login Page, JWT Storage & Logout Logic**\n\n## Task Description\nCreate the React `LoginPage` component with email/password input. On successful login, securely store the received JWT (e.g., in `localStorage` or `sessionStorage` with appropriate security considerations). Implement a client-side logout mechanism that clears the stored JWT and redirects the user. This fully implements ⏸️ **Frontend Login Page & JWT Storage/Logout**.\n\n## Project Context\n- **Project**: Test Todo App\n- **Tech Stack**: React + FastAPI + PostgreSQL\n- **Description**: A test todo application for testing\n\n## Implementation Requirements\n1. Follow the project's existing code style and patterns\n2. Use the specified tech stack: React + FastAPI + PostgreSQL\n3. Implement the task as described above\n4. Include proper error handling and validation\n5. Add appropriate comments and documentation\n6. Consider integration with existing features\n\n## Code Guidelines\n- Write clean, maintainable code\n- Follow best practices for the tech stack\n- Include necessary imports and dependencies\n- Handle edge cases appropriately\n- Add tests if applicable\n\n## Expected Output\nComplete implementation of the task with all necessary files, components, and configurations.",
    "completed": false,
    "order": 4,
    "created_at": "2025-08-02 09:19:30.157495"
  },
  {
    "id": "ca3bdd34-44a9-4e71-8bcc-fad88f5c775b",
    "title": "**Frontend Private Route Wrapper & Auth Context Setup**",
    "description": "Create a React `AuthContext` to manage the global authentication state (e.g., user info, JWT presence). Implement a `PrivateRoute` wrapper component that uses this context to check for authentication status and redirects unauthenticated users to the login page, thus protecting routes. This directly addresses ⏸️ **Frontend Private Route Wrapper & Auth Context**.",
    "prompt": "# Cursor Prompt: **Frontend Private Route Wrapper & Auth Context Setup**\n\n## Task Description\nCreate a React `AuthContext` to manage the global authentication state (e.g., user info, JWT presence). Implement a `PrivateRoute` wrapper component that uses this context to check for authentication status and redirects unauthenticated users to the login page, thus protecting routes. This directly addresses ⏸️ **Frontend Private Route Wrapper & Auth Context**.\n\n## Project Context\n- **Project**: Test Todo App\n- **Tech Stack**: React + FastAPI + PostgreSQL\n- **Description**: A test todo application for testing\n\n## Implementation Requirements\n1. Follow the project's existing code style and patterns\n2. Use the specified tech stack: React + FastAPI + PostgreSQL\n3. Implement the task as described above\n4. Include proper error handling and validation\n5. Add appropriate comments and documentation\n6. Consider integration with existing features\n\n## Code Guidelines\n- Write clean, maintainable code\n- Follow best practices for the tech stack\n- Include necessary imports and dependencies\n- Handle edge cases appropriately\n- Add tests if applicable\n\n## Expected Output\nComplete implementation of the task with all necessary files, components, and configurations.",
    "completed": false,
    "order": 5,
    "created_at": "2025-08-02 09:19:30.157513"
  },
  {
    "id": "1603a75e-f585-4ab6-81f6-47052c9f116e",
    "title": "**Backend Database Schema Update for User-Todo Linkage**",
    "description": "Modify the PostgreSQL database schema for the `todos` table to include a `user_id` column as a foreign key referencing the `users` table. Update corresponding Pydantic models in FastAPI to reflect this new relationship, ensuring a user's todos can be identified. This is essential for private todo lists.",
    "prompt": "# Cursor Prompt: **Backend Database Schema Update for User-Todo Linkage**\n\n## Task Description\nModify the PostgreSQL database schema for the `todos` table to include a `user_id` column as a foreign key referencing the `users` table. Update corresponding Pydantic models in FastAPI to reflect this new relationship, ensuring a user's todos can be identified. This is essential for private todo lists.\n\n## Project Context\n- **Project**: Test Todo App\n- **Tech Stack**: React + FastAPI + PostgreSQL\n- **Description**: A test todo application for testing\n\n## Implementation Requirements\n1. Follow the project's existing code style and patterns\n2. Use the specified tech stack: React + FastAPI + PostgreSQL\n3. Implement the task as described above\n4. Include proper error handling and validation\n5. Add appropriate comments and documentation\n6. Consider integration with existing features\n\n## Code Guidelines\n- Write clean, maintainable code\n- Follow best practices for the tech stack\n- Include necessary imports and dependencies\n- Handle edge cases appropriately\n- Add tests if applicable\n\n## Expected Output\nComplete implementation of the task with all necessary files, components, and configurations.",
    "completed": false,
    "order": 6,
    "created_at": "2025-08-02 09:19:30.157528"
  },
  {
    "id": "7db80fdb-4674-45c0-b10f-0b781dba851a",
    "title": "**Backend JWT Authentication Dependency & User-Specific Todo Routes**",
    "description": "Refine the existing JWT authentication dependency in FastAPI (e.g., `Depends(get_current_user)`). Modify the `GET`, `POST`, `PUT`, and `DELETE` todo endpoints to accept the `current_user` object and ensure all operations (fetching, creating, updating, deleting) are scoped to *only* the authenticated user's todos by filtering queries with `user_id`. This completes ⏸️ **Backend JWT Authentication Dependency & Protected Todo Routes** by adding the user-specific logic.",
    "prompt": "# Cursor Prompt: **Backend JWT Authentication Dependency & User-Specific Todo Routes**\n\n## Task Description\nRefine the existing JWT authentication dependency in FastAPI (e.g., `Depends(get_current_user)`). Modify the `GET`, `POST`, `PUT`, and `DELETE` todo endpoints to accept the `current_user` object and ensure all operations (fetching, creating, updating, deleting) are scoped to *only* the authenticated user's todos by filtering queries with `user_id`. This completes ⏸️ **Backend JWT Authentication Dependency & Protected Todo Routes** by adding the user-specific logic.\n\n## Project Context\n- **Project**: Test Todo App\n- **Tech Stack**: React + FastAPI + PostgreSQL\n- **Description**: A test todo application for testing\n\n## Implementation Requirements\n1. Follow the project's existing code style and patterns\n2. Use the specified tech stack: React + FastAPI + PostgreSQL\n3. Implement the task as described above\n4. Include proper error handling and validation\n5. Add appropriate comments and documentation\n6. Consider integration with existing features\n\n## Code Guidelines\n- Write clean, maintainable code\n- Follow best practices for the tech stack\n- Include necessary imports and dependencies\n- Handle edge cases appropriately\n- Add tests if applicable\n\n## Expected Output\nComplete implementation of the task with all necessary files, components, and configurations.",
    "completed": false,
    "order": 7,
    "created_at": "2025-08-02 09:19:30.157544"
  }
]