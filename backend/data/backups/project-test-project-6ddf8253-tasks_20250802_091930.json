[
  {
    "id": "478a2e4d-a30b-435d-b0d4-7cd68a1cc963",
    "title": "**Backend User Model & Database Setup**",
    "description": "Define the `User` Pydantic model and SQLAlchemy ORM model for the FastAPI backend, including fields for `id`, `email`, `hashed_password`. Create and apply an Alembic migration to add the `users` table to the PostgreSQL database.",
    "prompt": "# Cursor Prompt: **Backend User Model & Database Setup**\n\n## Task Description\nDefine the `User` Pydantic model and SQLAlchemy ORM model for the FastAPI backend, including fields for `id`, `email`, `hashed_password`. Create and apply an Alembic migration to add the `users` table to the PostgreSQL database.\n\n## Project Context\n- **Project**: Test Todo App\n- **Tech Stack**: React + FastAPI + PostgreSQL\n- **Description**: A test todo application for testing\n\n## Implementation Requirements\n1. Follow the project's existing code style and patterns\n2. Use the specified tech stack: React + FastAPI + PostgreSQL\n3. Implement the task as described above\n4. Include proper error handling and validation\n5. Add appropriate comments and documentation\n6. Consider integration with existing features\n\n## Code Guidelines\n- Write clean, maintainable code\n- Follow best practices for the tech stack\n- Include necessary imports and dependencies\n- Handle edge cases appropriately\n- Add tests if applicable\n\n## Expected Output\nComplete implementation of the task with all necessary files, components, and configurations.",
    "completed": false,
    "order": 1,
    "created_at": "2025-08-02 09:18:59.538881"
  },
  {
    "id": "1c5548fd-e112-4fb6-b753-fcb35cc10bd8",
    "title": "**Backend User Registration Endpoint**",
    "description": "Implement the `/register` FastAPI endpoint. This endpoint should accept user `email` and `password`, hash the password securely using `passlib[bcrypt]`, and save the new user record into the database. Include validation for unique emails and appropriate error handling.",
    "prompt": "# Cursor Prompt: **Backend User Registration Endpoint**\n\n## Task Description\nImplement the `/register` FastAPI endpoint. This endpoint should accept user `email` and `password`, hash the password securely using `passlib[bcrypt]`, and save the new user record into the database. Include validation for unique emails and appropriate error handling.\n\n## Project Context\n- **Project**: Test Todo App\n- **Tech Stack**: React + FastAPI + PostgreSQL\n- **Description**: A test todo application for testing\n\n## Implementation Requirements\n1. Follow the project's existing code style and patterns\n2. Use the specified tech stack: React + FastAPI + PostgreSQL\n3. Implement the task as described above\n4. Include proper error handling and validation\n5. Add appropriate comments and documentation\n6. Consider integration with existing features\n\n## Code Guidelines\n- Write clean, maintainable code\n- Follow best practices for the tech stack\n- Include necessary imports and dependencies\n- Handle edge cases appropriately\n- Add tests if applicable\n\n## Expected Output\nComplete implementation of the task with all necessary files, components, and configurations.",
    "completed": false,
    "order": 2,
    "created_at": "2025-08-02 09:18:59.540229"
  },
  {
    "id": "cf807a5a-916a-4a02-ab74-7bc09d540113",
    "title": "**Backend User Login & JWT Generation Endpoint**",
    "description": "Create the `/login` FastAPI endpoint. This endpoint will validate provided `email` and `password` against the stored hashed password. Upon successful authentication, it will generate an access JWT token using `python-jose` and return it to the client.",
    "prompt": "# Cursor Prompt: **Backend User Login & JWT Generation Endpoint**\n\n## Task Description\nCreate the `/login` FastAPI endpoint. This endpoint will validate provided `email` and `password` against the stored hashed password. Upon successful authentication, it will generate an access JWT token using `python-jose` and return it to the client.\n\n## Project Context\n- **Project**: Test Todo App\n- **Tech Stack**: React + FastAPI + PostgreSQL\n- **Description**: A test todo application for testing\n\n## Implementation Requirements\n1. Follow the project's existing code style and patterns\n2. Use the specified tech stack: React + FastAPI + PostgreSQL\n3. Implement the task as described above\n4. Include proper error handling and validation\n5. Add appropriate comments and documentation\n6. Consider integration with existing features\n\n## Code Guidelines\n- Write clean, maintainable code\n- Follow best practices for the tech stack\n- Include necessary imports and dependencies\n- Handle edge cases appropriately\n- Add tests if applicable\n\n## Expected Output\nComplete implementation of the task with all necessary files, components, and configurations.",
    "completed": false,
    "order": 3,
    "created_at": "2025-08-02 09:18:59.540259"
  },
  {
    "id": "2ec8c143-950e-437e-a818-e2f780dbccb3",
    "title": "**Backend JWT Authentication Dependency & Protected Todo Routes**",
    "description": "Develop a FastAPI dependency function that extracts and validates the JWT token from the `Authorization` header. Apply this dependency to the existing `/todos` routes (`GET`, `POST`, `PUT`, `DELETE`) to protect them. Modify the todo endpoints to automatically filter and associate todos with the authenticated user's ID, ensuring private todo lists.",
    "prompt": "# Cursor Prompt: **Backend JWT Authentication Dependency & Protected Todo Routes**\n\n## Task Description\nDevelop a FastAPI dependency function that extracts and validates the JWT token from the `Authorization` header. Apply this dependency to the existing `/todos` routes (`GET`, `POST`, `PUT`, `DELETE`) to protect them. Modify the todo endpoints to automatically filter and associate todos with the authenticated user's ID, ensuring private todo lists.\n\n## Project Context\n- **Project**: Test Todo App\n- **Tech Stack**: React + FastAPI + PostgreSQL\n- **Description**: A test todo application for testing\n\n## Implementation Requirements\n1. Follow the project's existing code style and patterns\n2. Use the specified tech stack: React + FastAPI + PostgreSQL\n3. Implement the task as described above\n4. Include proper error handling and validation\n5. Add appropriate comments and documentation\n6. Consider integration with existing features\n\n## Code Guidelines\n- Write clean, maintainable code\n- Follow best practices for the tech stack\n- Include necessary imports and dependencies\n- Handle edge cases appropriately\n- Add tests if applicable\n\n## Expected Output\nComplete implementation of the task with all necessary files, components, and configurations.",
    "completed": false,
    "order": 4,
    "created_at": "2025-08-02 09:18:59.540271"
  },
  {
    "id": "8d558bdc-969b-4293-a926-803bc523eba7",
    "title": "**Frontend Registration Page & Validation**",
    "description": "Create a new React component for the `RegistrationPage`. Implement a user registration form with `email` and `password` input fields. Add client-side form validation (e.g., required fields, email format, password strength) and handle form submission to call the `/register` FastAPI endpoint.",
    "prompt": "# Cursor Prompt: **Frontend Registration Page & Validation**\n\n## Task Description\nCreate a new React component for the `RegistrationPage`. Implement a user registration form with `email` and `password` input fields. Add client-side form validation (e.g., required fields, email format, password strength) and handle form submission to call the `/register` FastAPI endpoint.\n\n## Project Context\n- **Project**: Test Todo App\n- **Tech Stack**: React + FastAPI + PostgreSQL\n- **Description**: A test todo application for testing\n\n## Implementation Requirements\n1. Follow the project's existing code style and patterns\n2. Use the specified tech stack: React + FastAPI + PostgreSQL\n3. Implement the task as described above\n4. Include proper error handling and validation\n5. Add appropriate comments and documentation\n6. Consider integration with existing features\n\n## Code Guidelines\n- Write clean, maintainable code\n- Follow best practices for the tech stack\n- Include necessary imports and dependencies\n- Handle edge cases appropriately\n- Add tests if applicable\n\n## Expected Output\nComplete implementation of the task with all necessary files, components, and configurations.",
    "completed": false,
    "order": 5,
    "created_at": "2025-08-02 09:18:59.540279"
  },
  {
    "id": "95547efa-af7e-4d59-b972-99b9651fb47f",
    "title": "**Frontend Login Page & JWT Storage/Logout**",
    "description": "Develop a new React component for the `LoginPage`. Implement a login form with `email` and `password` fields. Handle form submission to call the `/login` FastAPI endpoint. Upon successful login, securely store the received JWT token (e.g., in `localStorage`). Implement a logout button/functionality that clears the stored JWT and redirects the user.",
    "prompt": "# Cursor Prompt: **Frontend Login Page & JWT Storage/Logout**\n\n## Task Description\nDevelop a new React component for the `LoginPage`. Implement a login form with `email` and `password` fields. Handle form submission to call the `/login` FastAPI endpoint. Upon successful login, securely store the received JWT token (e.g., in `localStorage`). Implement a logout button/functionality that clears the stored JWT and redirects the user.\n\n## Project Context\n- **Project**: Test Todo App\n- **Tech Stack**: React + FastAPI + PostgreSQL\n- **Description**: A test todo application for testing\n\n## Implementation Requirements\n1. Follow the project's existing code style and patterns\n2. Use the specified tech stack: React + FastAPI + PostgreSQL\n3. Implement the task as described above\n4. Include proper error handling and validation\n5. Add appropriate comments and documentation\n6. Consider integration with existing features\n\n## Code Guidelines\n- Write clean, maintainable code\n- Follow best practices for the tech stack\n- Include necessary imports and dependencies\n- Handle edge cases appropriately\n- Add tests if applicable\n\n## Expected Output\nComplete implementation of the task with all necessary files, components, and configurations.",
    "completed": false,
    "order": 6,
    "created_at": "2025-08-02 09:18:59.540291"
  },
  {
    "id": "730cc251-a9c7-4870-9dfd-d55fb50a6eac",
    "title": "**Frontend Private Route Wrapper & Auth Context**",
    "description": "Create a `ProtectedRoute` React component or HOC that checks for the presence of a valid JWT token. Integrate this component with React Router to protect routes that require authentication (e.g., the Todo list page). Implement an `AuthContext` to manage the global authentication state (e.g., `isLoggedIn`, `user`) and provide it to the application.",
    "prompt": "# Cursor Prompt: **Frontend Private Route Wrapper & Auth Context**\n\n## Task Description\nCreate a `ProtectedRoute` React component or HOC that checks for the presence of a valid JWT token. Integrate this component with React Router to protect routes that require authentication (e.g., the Todo list page). Implement an `AuthContext` to manage the global authentication state (e.g., `isLoggedIn`, `user`) and provide it to the application.\n\n## Project Context\n- **Project**: Test Todo App\n- **Tech Stack**: React + FastAPI + PostgreSQL\n- **Description**: A test todo application for testing\n\n## Implementation Requirements\n1. Follow the project's existing code style and patterns\n2. Use the specified tech stack: React + FastAPI + PostgreSQL\n3. Implement the task as described above\n4. Include proper error handling and validation\n5. Add appropriate comments and documentation\n6. Consider integration with existing features\n\n## Code Guidelines\n- Write clean, maintainable code\n- Follow best practices for the tech stack\n- Include necessary imports and dependencies\n- Handle edge cases appropriately\n- Add tests if applicable\n\n## Expected Output\nComplete implementation of the task with all necessary files, components, and configurations.",
    "completed": false,
    "order": 7,
    "created_at": "2025-08-02 09:18:59.540298"
  }
]